// Generated by CoffeeScript 1.9.2
(function() {
  var Debugate, _module,
    slice = [].slice;

  Debugate = (function() {
    function Debugate() {}

    Debugate.log = function() {
      var what, x;
      what = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      return console.log('DEBUG:', ((function() {
        var i, len, results;
        results = [];
        for (i = 0, len = what.length; i < len; i++) {
          x = what[i];
          results.push("" + x);
        }
        return results;
      })()).join(' '));
    };

    Debugate.profile = (function() {
      var count, fn, fn_now, fns, pulse, start, time, total;
      count = {};
      start = {};
      time = {};
      pulse = {};
      total = {
        count: 0,
        time: 0
      };
      if (typeof window === "undefined" || window === null) {
        try {
          fn = require('microtime');
          fn_now = function() {
            return fn.now();
          };
        } catch (_error) {}
      }
      if (fn_now == null) {
        fn_now = function() {
          return Date.now() * 1000;
        };
      }
      return fns = {
        count: function(x) {
          if (count[x] == null) {
            count[x] = 0;
          }
          count[x] += 1;
          return total.count += 1;
        },
        start: function(x) {
          fns.count(x);
          start[x] = fn_now();
        },
        end: function(x, xx) {
          var lapse, now;
          now = fn_now();
          if (time[x] == null) {
            time[x] = 0;
          }
          time[x] += lapse = now - start[x];
          total.time += lapse;
          start[x] = null;
          if (xx != null) {
            start[xx] = now;
            fns.count(xx);
          }
        },
        toggle: function(x) {
          if (start[x] == null) {
            return fns.start(x);
          } else {
            return fns.end(x);
          }
        },
        pulse: function(x, reset) {
          var xx;
          if (pulse[x] == null) {
            pulse[x] = 0;
          }
          if (reset === true) {
            pulse[x] = 0;
          }
          if (start[xx = x + pulse[x]] == null) {
            return fns.start(xx);
          } else {
            if (reset !== false) {
              return fns.end(xx, x + ++pulse[x]);
            } else {
              return fns.end(xx);
            }
          }
        },
        reset: function(x) {
          var k;
          if (x != null) {
            total.count -= count[x];
            total.time -= time[x];
            count[x] = time[x] = pulse[x] = 0;
            return start[x] = null;
          } else {
            for (k in count) {
              count[k] = time[k] = pulse[x] = 0;
              start[k] = null;
            }
            return total.count = total.time = 0;
          }
        },
        wait: function(y) {
          var i, ref, results;
          results = [];
          for (i = 0, ref = y; 0 <= ref ? i < ref : i > ref; 0 <= ref ? i++ : i--) {          }
          return results;
        },
        spent: function(x) {
          var data, k, ref, ref1;
          if (x != null) {
            return {
              time: (ref = time[x]) != null ? ref : 0,
              count: (ref1 = count[x]) != null ? ref1 : 0,
              total: total
            };
          } else {
            data = {};
            for (k in count) {
              data[k] = {
                time: time[k],
                count: count[k]
              };
            }
            return {
              data: data,
              total: total
            };
          }
        }
      };
    })();

    return Debugate;

  })();

  _module = typeof window !== "undefined" && window !== null ? window : module;

  _module[_module.exports != null ? "exports" : "Debugate"] = Debugate;

}).call(this);
