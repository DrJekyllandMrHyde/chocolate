// Generated by CoffeeScript 1.6.3
(function() {
  var Specolate, available, finished, log, _module,
    __hasProp = {}.hasOwnProperty;

  log = [];

  available = true;

  finished = true;

  Specolate = (function() {
    function Specolate() {}

    Specolate.html_reporter = function(module_filename, options, callback) {
      var line, needs_refresh, result, _i, _len;
      if (available) {
        Specolate.report(module_filename, options, callback);
      }
      needs_refresh = !finished ? '<head>\n<meta http-equiv="refresh" content="1">\n</head>' : '';
      available = finished;
      result = '<html>\n' + needs_refresh + '\n<body>\n';
      for (_i = 0, _len = log.length; _i < _len; _i++) {
        line = log[_i];
        result += '<div>' + line.replace(/\ /g, '&nbsp;') + '</div>';
      }
      return result += '</body>\n</html>';
    };

    Specolate.json_reporter = function(module_filename, options, callback) {
      var event;
      if (available) {
        event = Specolate.report(module_filename, options, callback != null ? (function() {
          available = finished;
          return callback.apply(null, arguments);
        }) : void 0);
        if (event != null) {
          event.on('end', function() {
            return available = finished;
          });
        }
        return event;
      } else {
        return '';
      }
    };

    Specolate.get_extension = function(path) {
      if ((path = path.substr(1 + path.lastIndexOf('/'))).indexOf('.') === -1) {
        return '';
      } else {
        return '.' + path.split('.').slice(-1)[0];
      }
    };

    Specolate.get_spec_filename = function(path) {
      var ext, _ref;
      if (path === '') {
        return '';
      }
      if ((_ref = (ext = Specolate.get_extension(path))) !== '' && _ref !== '.') {
        return path.replace(ext, '.spec' + ext);
      }
      return path + '.spec';
    };

    Specolate.inspect = function(reporter, module_filename, options, callback) {
      var report;
      if ((report = Specolate[reporter + '_reporter']) != null) {
        return report(module_filename, options, callback);
      }
    };

    Specolate.report = function(module_filename, options, callback) {
      var context, error, event, host, k, reporter, result, specolate_filename, v, vm;
      if (!finished) {
        return '';
      }
      host = typeof window !== "undefined" && window !== null ? window : {
        __: options
      };
      event = null;
      log = [];
      log.failedCount = 0;
      log.totalCount = 0;
      available = false;
      finished = false;
      specolate_filename = Specolate.get_spec_filename(module_filename);
      reporter = {
        log: function() {},
        reportSpecStarting: function(runner) {},
        reportRunnerStarting: function(runner) {},
        reportSuiteResults: function(suite) {},
        reportSpecResults: function(spec) {},
        reportRunnerResults: function(runner) {
          var cache, count, description, i, k, one_log, path, result, spaces, spec, specResults, suite, _i, _j, _k, _len, _len1, _len2, _log, _ref, _ref1, _ref2, _ref3;
          _ref = runner.suites();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            suite = _ref[_i];
            specResults = suite.results();
            path = [];
            while (suite) {
              path.unshift(suite.description);
              suite = suite.parentSuite;
            }
            description = path.join('.');
            spaces = ((function() {
              var _j, _ref1, _results;
              _results = [];
              for (i = _j = 0, _ref1 = 2 * path.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
                _results.push(' ');
              }
              return _results;
            })()).join('');
            one_log = [];
            one_log.push(spaces + 'spec : ' + description);
            _ref1 = specResults.items_;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              spec = _ref1[_j];
              if (spec.description) {
                one_log.push(spaces + '  it ' + spec.description + ': ');
                _ref2 = spec.items_;
                for (i = _k = 0, _len2 = _ref2.length; _k < _len2; i = ++_k) {
                  result = _ref2[i];
                  [].splice.apply(one_log, [-1, 9e9].concat(_ref3 = one_log.slice(-1) + (i > 0 ? ',' : '') + ' ' + result.message)), _ref3;
                  if (!result.passed_) {
                    log.failedCount += 1;
                  }
                  log.totalCount += 1;
                }
              }
            }
            log.push.apply(log, one_log);
          }
          _log = ['results : ' + log.failedCount + ' failed out of ' + log.totalCount, '', 'started at ' + new Date(), '', 'finished at ' + new Date()];
          [].splice.apply(_log, [3, (-2) - 3 + 1].concat(log)), log;
          count = {
            failed: log.failedCount,
            total: log.totalCount
          };
          log = _log;
          finished = true;
          cache = typeof window !== "undefined" && window !== null ? window.modules : require.cache;
          for (k in cache) {
            if (!__hasProp.call(cache, k)) continue;
            if (!(k.indexOf('.spec') !== -1)) {
              continue;
            }
            delete cache[k];
            cache[k] = null;
          }
          result = {
            log: log,
            count: count
          };
          if (callback != null) {
            callback(result);
          } else {
            process.nextTick(function() {
              return event != null ? event.emit('end', result) : void 0;
            });
          }
          return runner.suites().length = 0;
        }
      };
      try {
        if (typeof window === "undefined" || window === null) {
          vm = require('vm');
          context = vm.createContext({
            reporter: reporter,
            host: host
          });
          for (k in global) {
            if (!__hasProp.call(global, k)) continue;
            v = global[k];
            context[k] = v;
          }
          context.module = module;
          context.require = require;
          context.global = context;
          context.global.global = context;
          event = vm.runInContext("var Events, event, k;\nEvents = require('events');\nevent = new Events.EventEmitter;\nhost.jasmine = require('jasmine-node');\ntry { require('" + specolate_filename + "'); } catch (_error) {}\nhost.jasmine.getEnv().reporter = reporter;\nhost.jasmine.getEnv().__ = host.__;\nhost.jasmine.getEnv().execute();\nevent;", context, specolate_filename);
        } else {
          require('../' + specolate_filename, {
            use_cache: false
          });
          host.jasmine.getEnv().reporter = reporter;
          host.jasmine.getEnv().execute();
        }
      } catch (_error) {
        error = _error;
        finished = true;
        result = {
          log: ['', '', '', error.stack],
          count: {
            failed: 1,
            total: 1
          }
        };
        if (callback != null) {
          callback(result);
        } else {
          process.nextTick(function() {
            return event != null ? event.emit('end', result) : void 0;
          });
        }
      }
      return event;
    };

    Specolate.has_finished = function() {
      return finished;
    };

    return Specolate;

  })();

  _module = typeof window !== "undefined" && window !== null ? window : module;

  _module[_module.exports != null ? "exports" : "Specolate"] = Specolate;

}).call(this);
