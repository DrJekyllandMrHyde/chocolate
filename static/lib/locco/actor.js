// Generated by CoffeeScript 1.7.1
(function() {
  var Actor, Document, Interface, Workflow, _, _module;

  _ = require('../../general/chocodash');

  Interface = require('../locco/interface');

  Workflow = require('../locco/workflow');

  Document = require('../locco/document');

  Actor = _.prototype({
    adopt: {
      go: function(where, callback) {
        return _.go(where, callback);
      },
      awake: function(uuid, __) {
        var publisher;
        if (typeof window === "undefined" || window === null) {
          if ((uuid != null) && (__.session.frozen != null) && (__.session.frozen[uuid] == null)) {
            return void 0;
          }
          publisher = new _.Publisher;
          __.space.read(uuid, function(frozen) {
            return publisher.notify(frozen);
          });
          return publisher;
        }
      }
    },
    constructor: function(options) {
      var doc, is_ready, k, v, _bind, _ref;
      is_ready = new _.Publisher;
      this.ready = function(func) {
        return is_ready.subscribe(((function(_this) {
          return function() {
            return func.call(_this);
          };
        })(this)));
      };
      this.stage = (_ref = options != null ? options.workflow : void 0) != null ? _ref : Workflow.main;
      is_ready.subscribe(((function(_this) {
        return function() {
          return _this.stage.enter(_this);
        };
      })(this)));
      if (typeof window !== "undefined" && window !== null) {
        this.stage.ready((function(_this) {
          return function() {
            return _this.stage.broadcast(_this, 'awake', options != null ? options.uuid : void 0, {
              how: 'json'
            }, function(frozen) {
              var k, v;
              if (frozen != null) {
                for (k in frozen) {
                  v = frozen[k];
                  _this[k] = v;
                }
              }
              return is_ready.notify();
            });
          };
        })(this));
      } else {
        setTimeout((function() {
          return is_ready.notify();
        }), 0);
      }
      for (k in this) {
        v = this[k];
        if (v instanceof Document) {
          doc = v;
          break;
        }
      }
      if (doc == null) {
        doc = {};
      }
      for (k in this) {
        v = this[k];
        if (v instanceof Actor) {
          _["do"].internal(v, 'parent', this);
        }
      }
      _bind = (function(_this) {
        return function(o) {
          for (k in o) {
            v = o[k];
            if (v instanceof Interface) {
              v.bind(_this, doc, k);
            } else if (v.constructor === {}.constructor) {
              _bind(v);
            }
          }
        };
      })(this);
      _bind(this);
    },
    id: function() {
      var _ref, _ref1;
      if (((_ref = this._) != null ? (_ref1 = _ref._) != null ? _ref1.uuid : void 0 : void 0) == null) {
        _["do"].identify(this, {
          filter: [Document]
        });
      }
      return this._._.uuid;
    },
    show: function() {},
    area: function(name, id) {
      var k, set, v;
      _["do"].internal(this, 'area', {});
      set = (function(_this) {
        return function(k, v) {
          var area, parent, _ref, _ref1;
          if (v == null) {
            if (_this._._.area[k] != null) {
              return _this._._.area[k];
            }
            parent = _this;
            while ((parent = (_ref = parent._) != null ? (_ref1 = _ref._) != null ? _ref1.parent : void 0 : void 0) != null) {
              if ((area = parent.area(k)) != null) {
                return area;
              }
            }
          } else {
            return _this._._.area[k] = v;
          }
        };
      })(this);
      if (_.isBasicObject(name)) {
        for (k in name) {
          v = name[k];
          set(k, v);
        }
      } else {
        return set(name, id);
      }
    }
  });

  Actor.Web = _.prototype({
    inherit: Actor,
    use: function() {
      var _shown;
      _shown = {};
      return this.show = function(path, source, area) {
        var step, steps, where, _i, _len, _ref;
        steps = path.split('.');
        where = this;
        for (_i = 0, _len = steps.length; _i < _len; _i++) {
          step = steps[_i];
          where = where[step];
          if (where == null) {
            return;
          }
        }
        if (area == null) {
          area = (_ref = where.area) != null ? _ref : 'inline';
        }
        switch (area) {
          case 'inline':
            return typeof where.submit === "function" ? where.submit(function(result) {
              var uuid, _ref1;
              if (((uuid = _shown[path]) == null) || $("#" + uuid).length === 0) {
                uuid = _shown[path] = '_' + _.Uuid();
                result = "<div id='" + uuid + "'>" + result + "</div>";
                if (!source.after) {
                  source = $(source);
                }
                return (_ref1 = source.after) != null ? _ref1.call(source, result) : void 0;
              }
            }) : void 0;
          case 'view':
            break;
          case 'modal':
            break;
          case 'popup':
        }
      };
    }
  });

  _module = typeof window !== "undefined" && window !== null ? window : module;

  if (_module.exports != null) {
    _module.exports = Actor;
  } else {
    if (window.Locco == null) {
      window.Locco = {};
    }
    window.Locco.Actor = Actor;
  }

}).call(this);
