// Generated by CoffeeScript 1.9.2
(function() {
  var Chocokup, Interface, _, _module,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('../../general/chocodash');

  Chocokup = require('../../general/chocokup');

  Interface = _.prototype({
    constructor: function(service) {
      var item, name;
      if (typeof service === 'function') {
        service = {
          action: service
        };
      }
      if (service != null) {
        if (service.defaults != null) {
          if (typeof service.defaults === 'function') {
            this.defaults = service.defaults;
          } else {
            this.defaults = _.defaults(this.defaults, service.defaults);
          }
        }
        if (service.locks != null) {
          if (typeof service.locks === 'function') {
            this.locks = service.locks;
          } else {
            this.locks = _.defaults(this.locks, service.locks);
          }
        }
        if (service.values != null) {
          this.values = service.values;
        }
        if (service.steps != null) {
          this.steps = service.steps;
        }
        for (name in service) {
          item = service[name];
          if (name !== 'defaults' && name !== 'locks' && name !== 'values' && name !== 'steps') {
            this[name] = item;
          }
        }
      }
    },
    bind: function(actor, document, name1) {
      this.name = name1;
      if (!((this.actor != null) && (this.document != null))) {
        this.actor = actor;
        this.document = document;
        switch (_.type(this.update)) {
          case _.Type.Function:
            return this.observe(this.update);
          case _.Type.String:
            return this.observe((function(_this) {
              return function(html) {
                $(_this.update).html(html);
              };
            })(this));
        }
      }
    },
    review: function(bin, scope, reaction, end) {
      var check, check_services, ref, ref1;
      check = {
        defaults: (function(_this) {
          return function(object, defaults) {
            var set;
            if (typeof defaults === 'function') {
              defaults = defaults.call(_this);
            }
            set = function(o, d) {
              var dk, dv;
              for (dk in d) {
                if (!hasProp.call(d, dk)) continue;
                dv = d[dk];
                if (_.isBasicObject(o[dk]) && _.isBasicObject(dv)) {
                  set(o[dk], dv);
                } else {
                  if (o[dk] == null) {
                    o[dk] = dv;
                  }
                }
              }
              return o;
            };
            return set(object, defaults);
          };
        })(this),
        locks: (function(_this) {
          return function(keys, locks) {
            var i, len, lock;
            if (locks == null) {
              return true;
            }
            if (typeof locks === 'function') {
              locks = locks.call(_this);
            }
            for (i = 0, len = locks.length; i < len; i++) {
              lock = locks[i];
              if (indexOf.call(keys, lock) < 0) {
                return false;
              }
            }
            return true;
          };
        })(this),
        values: function(bin, controller) {
          return controller.call(bin);
        }
      };
      check_services = function() {
        _.flow(function(run) {
          var check_service;
          check_service = function(service_bin, local_scope) {
            var _local_scope, name, service;
            for (name in service_bin) {
              service = service_bin[name];
              if (name !== '__') {
                if (service instanceof Interface) {
                  (function(_bin, _name, _service, _local_scope) {
                    return run(function(next_service) {
                      var _next_service, i, item, j, len, len1, ref, ref1, service_result;
                      if (ref = _bin[_name], indexOf.call(scope.reviewed, ref) < 0) {
                        _bin[_name].bin = {
                          __: _bin.__
                        };
                      }
                      if (_local_scope != null) {
                        for (i = 0, len = _local_scope.length; i < len; i++) {
                          item = _local_scope[i];
                          scope.global.push(item);
                        }
                        _next_service = next_service;
                        next_service = function() {
                          var j, len1;
                          for (j = 0, len1 = _local_scope.length; j < len1; j++) {
                            item = _local_scope[j];
                            scope.global.pop();
                          }
                          return _next_service();
                        };
                      }
                      if (ref1 = _bin[_name], indexOf.call(scope.reviewed, ref1) < 0) {
                        scope.reviewed.push(_bin[_name]);
                        service_result = _service.review(_bin[_name].bin, scope, reaction, next_service);
                      }
                      if (service_result !== next_service) {
                        if (_local_scope != null) {
                          for (j = 0, len1 = _local_scope.length; j < len1; j++) {
                            item = _local_scope[j];
                            scope.global.pop();
                          }
                        }
                        next_service();
                      }
                      return service_result;
                    });
                  })(service_bin, name, service, local_scope != null ? local_scope.slice(0) : null);
                } else {
                  if (_.isBasicObject(service)) {
                    _local_scope = local_scope != null ? local_scope.slice(0) : [];
                    _local_scope.push(name);
                    check_service(service, _local_scope);
                  }
                }
              }
            }
          };
          check_service(bin);
          return run(function() {
            return end();
          });
        });
        return end;
      };
      if (reaction.certified == null) {
        reaction.certified = true;
      }
      if (this.defaults != null) {
        check.defaults(bin, this.defaults);
      }
      if (this.locks != null) {
        reaction.certified = check.locks((ref = bin.__) != null ? (ref1 = ref.session) != null ? ref1.keys : void 0 : void 0, this.locks);
      }
      if (this.values != null) {
        reaction.certified = check.values(bin, this.values);
      }
      return check_services();
    },
    submit: function(bin) {
      var publisher, reaction;
      if (bin == null) {
        bin = {};
      }
      publisher = new _.Publisher;
      reaction = new Interface.Reaction;
      _.flow({
        self: this
      }, function(run) {
        run(function(end) {
          return end["with"](this.review(bin, {
            global: [],
            local: [],
            reviewed: []
          }, reaction, end));
        });
        run(function(end) {
          var respond, result, self;
          if (reaction.certified && (this.steps != null)) {
            respond = function(o) {
              this.reaction.bin = o;
              return end();
            };
            respond.later = end;
            self = {
              bin: bin,
              document: this.document,
              'interface': this,
              actor: this.actor,
              reaction: reaction,
              respond: respond,
              transmit: (function(actor, service) {
                actor[service].submit(this.bin).subscribe((function(_this) {
                  return function(reaction) {
                    return _this.respond(reaction.bin);
                  };
                })(this));
                return respond.later;
              })
            };
            result = this.steps.call(self, self);
          }
          return end["with"](result);
        });
        run(function(end) {
          var respond, result, self;
          if (reaction.certified && (this.action != null)) {
            respond = function(o) {
              this.reaction.bin = o;
              return end();
            };
            respond.later = end;
            self = {
              bin: bin,
              document: this.document,
              'interface': this,
              actor: this.actor,
              reaction: reaction,
              respond: respond,
              transmit: (function(actor, service) {
                actor[service].submit(this.bin).subscribe((function(_this) {
                  return function(reaction) {
                    return _this.respond(reaction.bin);
                  };
                })(this));
                return respond.later;
              })
            };
            result = this.action.call(self, self);
            if (!((reaction.bin != null) || result === end.later)) {
              reaction.bin = result;
            }
          }
          return end["with"](result);
        });
        return run(function() {
          return publisher.notify(reaction);
        });
      });
      return publisher;
    },
    observe: function(action) {
      return new _.Observer((function(_this) {
        return function() {
          var ref;
          if ((ref = _this.document.signal) != null) {
            ref.value();
          }
          return _this.submit().subscribe(function(arg) {
            var bin;
            bin = arg.bin;
            return action(bin.render());
          });
        };
      })(this));
    }
  });

  Interface.Reaction = _.prototype({
    constructor: function(bin1, certified) {
      this.bin = bin1;
      this.certified = certified;
    }
  });

  Interface.Remote = _.prototype({
    inherit: Interface,
    use: function() {
      return this.submit = function(bin) {
        if (bin == null) {
          bin = {};
        }
        if ('__' in bin) {
          return _["super"](this, bin);
        } else {
          return this.actor.submit(this.name, bin);
        }
      };
    }
  });

  Interface.Web = _.prototype({
    inherit: Interface,
    use: function() {
      this.type = 'App';
      this.review = function(bin, scope, reaction, end) {
        _.flow({
          self: this
        }, function(run) {
          run(function(end) {
            return end["with"](_["super"](Interface.Web.prototype.review, this, bin, scope, reaction, end));
          });
          return run(function() {
            var check_interfaces;
            reaction.bin = '';
            scope.global.length = 0;
            scope.local.length = 0;
            check_interfaces = function(bin) {
              var i, kups, len, name, ref, ref1, ref2, ref3, ref4, service, step;
              for (name in bin) {
                service = bin[name];
                if (service instanceof Interface.Web) {
                  kups = reaction.kups != null ? reaction.kups : reaction.kups = {};
                  ref = scope.global;
                  for (i = 0, len = ref.length; i < len; i++) {
                    step = ref[i];
                    kups = kups[step] != null ? kups[step] : kups[step] = {};
                  }
                  if (kups[name] == null) {
                    kups[name] = new Function('o', "var interface = this.interface, bin = this.bin, actor = this.actor, __hasProp = {}.hasOwnProperty;\ntry {this.interface = bin" + (scope.local.length > 0 ? '.' + scope.local.join('.') : '') + "." + name + ";} \ncatch (error) { try {this.interface = bin." + name + ";} catch (error) {}; };\nthis.actor = this.interface != null ? this.interface.actor : null;\nthis.bin = this.interface != null ? (this.interface.bin != null ? this.interface.bin : {}) : {};\nif (o != null) {\n    for (k in o) {\n        if (hasOwnProperty.call(o, k)) {\n            this.bin[k] = o[k];\n        }\n    }\n}\n(" + (((ref1 = (ref2 = service.action) != null ? ref2.overriden : void 0) != null ? ref1 : service.action).toString()) + ").call(this);\nthis.bin = bin; this.interface = interface, this.actor = actor;");
                  }
                  if (scope.web_reviewed == null) {
                    scope.web_reviewed = [];
                  }
                  if (!((ref3 = bin[name], indexOf.call(scope.web_reviewed, ref3) >= 0) || (((ref4 = bin[name]) != null ? ref4.bin : void 0) == null))) {
                    scope.web_reviewed.push(bin[name]);
                    check_interfaces(bin[name].bin);
                  }
                } else {
                  if (_.isBasicObject(service)) {
                    scope.global.push(name);
                    scope.local.push(name);
                    check_interfaces(service);
                    scope.local.pop();
                    scope.global.pop();
                  }
                }
              }
            };
            check_interfaces(bin);
            return end();
          });
        });
        return end;
      };
      return this.submit = function(bin) {
        var callback, chocokup_code, ref, ref1, result;
        if (!((ref = this.action) != null ? ref.overriden : void 0)) {
          chocokup_code = (ref1 = this.action) != null ? ref1 : function() {};
          this.action = (function(_this) {
            return function(arg) {
              var bin, kups, options, reaction;
              bin = arg.bin, reaction = arg.reaction;
              if (bin == null) {
                bin = {};
              }
              kups = reaction.kups;
              delete reaction.kups;
              options = {
                bin: bin,
                document: _this.document,
                'interface': _this,
                actor: _this.actor,
                kups: kups
              };
              if (bin.theme != null) {
                options.theme = bin.theme;
              }
              if (bin.with_coffee != null) {
                options.with_coffee = bin.with_coffee;
              }
              if (bin.manifest != null) {
                options.manifest = bin.manifest;
              }
              return reaction.bin = (function() {
                var ref2;
                switch (this.type) {
                  case 'Panel':
                    return new Chocokup.Panel(options, chocokup_code);
                  default:
                    return new Chocokup[this.type]((ref2 = bin != null ? bin.name : void 0) != null ? ref2 : '', options, chocokup_code);
                }
              }).call(_this);
            };
          })(this);
          this.action.overriden = chocokup_code;
        }
        if (typeof bin === 'function') {
          callback = bin;
          bin = {};
        }
        result = _["super"](this, bin);
        if (callback != null) {
          result.subscribe(function(reaction) {
            return callback(reaction.bin.render());
          });
        }
        return result;
      };
    }
  });

  Interface.Web.App = Interface.Web;

  Interface.Web.Document = _.prototype({
    inherit: Interface.Web,
    use: function() {
      return this.type = 'Document';
    }
  });

  Interface.Web.Panel = Interface.Web.Html = _.prototype({
    inherit: Interface.Web,
    use: function() {
      return this.type = 'Panel';
    }
  });

  _module = typeof window !== "undefined" && window !== null ? window : module;

  if (_module.exports != null) {
    _module.exports = Interface;
  } else {
    if (window.Locco == null) {
      window.Locco = {};
    }
    window.Locco.Interface = Interface;
  }

}).call(this);
