// Generated by CoffeeScript 1.7.1
(function() {
  var Observer, Publisher, Signal, _, _module,
    __hasProp = {}.hasOwnProperty,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _module = typeof window !== "undefined" && window !== null ? window : module;

  _module[_module.exports != null ? "exports" : "Chocodash"] = _ = {};

  _.type = function(o) {
    return Object.prototype.toString.apply(o);
  };

  _.Type = {
    Object: '[object Object]',
    Array: '[object Array]',
    Boolean: '[object Boolean]',
    Number: '[object Number]',
    Date: '[object Date]',
    Function: '[object Function]',
    Math: '[object Math]',
    String: '[object String]',
    Undefined: '[object Undefined]',
    Null: '[object Null]'
  };

  _.isObject = function(o) {
    if (o == null) {
      return false;
    }
    switch (typeof o) {
      case 'object':
      case 'function':
        return true;
      default:
        return false;
    }
  };

  _.isBasicObject = function(o) {
    if (o == null) {
      return false;
    }
    return o.constructor === {}.constructor;
  };

  _.prototype = function(options, more) {
    var constructor, ctor, fn, k, name, prototype, v, value;
    if (more != null) {
      if (options != null) {
        for (k in more) {
          v = more[k];
          options[k] = v;
        }
      } else {
        options = more;
      }
      more = null;
    }
    prototype = (function() {
      var flatten;
      flatten = function() {
        var args;
        args = [];
        if (arguments[0] != null) {
          Array.prototype.push.apply(args, arguments);
        }
        return args;
      };
      return {
        use: function() {
          var o, _i, _len, _ref;
          _ref = flatten.apply(null, arguments);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            o = _ref[_i];
            o.call(this.prototype);
          }
          return this;
        },
        adopt: function() {
          var o, _i, _len, _ref, _ref1;
          _ref = flatten.apply(null, arguments);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            o = _ref[_i];
            for (k in o) {
              if (!__hasProp.call(o, k)) continue;
              v = o[k];
              this[k] = v;
            }
            _ref1 = o.prototype;
            for (k in _ref1) {
              if (!__hasProp.call(_ref1, k)) continue;
              v = _ref1[k];
              this.prototype[k] = v;
            }
          }
          return this;
        },
        inherit: function(parent) {
          var child, ctor;
          child = this;
          if (parent != null) {
            for (k in parent) {
              if (!__hasProp.call(parent, k)) continue;
              v = parent[k];
              child[k] = v;
            }
            ctor = function() {
              this.constructor = child;
            };
            ctor.prototype = parent.prototype;
            child.prototype = new ctor();
            child.__super__ = parent.prototype;
          }
          return this;
        }
      };
    })();
    constructor = (options != null ? options.hasOwnProperty('constructor') : void 0) ? options.constructor : null;
    ctor = constructor != null ? function() {
      constructor.apply(this, arguments);
    } : (options != null ? options.inherit : void 0) != null ? function() {
      Array.prototype.unshift.call(arguments, this);
      _["super"].apply(_, arguments);
    } : function() {};
    if (options != null) {
      for (name in options) {
        value = options[name];
        if (name === 'adopt' || name === 'inherit' || name === 'use') {
          prototype[name].call(ctor, value);
        } else {
          if (name !== 'constructor') {
            ctor.prototype[name] = value;
          }
        }
      }
    }
    for (name in prototype) {
      if (!__hasProp.call(prototype, name)) continue;
      fn = prototype[name];
      if (ctor[name] == null) {
        ctor[name] = fn;
      }
    }
    return ctor;
  };

  _["super"] = function() {
    var constructor, func, k, self, super_func, v, _func, _name, _ref;
    super_func = null;
    func = arguments[0], self = arguments[1];
    if (typeof func !== 'function') {
      self = func;
      func = null;
    }
    _func = func != null ? func : arguments.callee.caller;
    _name = null;
    constructor = self.constructor;
    while (constructor && (super_func == null)) {
      _ref = constructor.prototype;
      for (k in _ref) {
        if (!__hasProp.call(_ref, k)) continue;
        v = _ref[k];
        if (_func === v) {
          _name = k;
          break;
        }
      }
      if (_name != null) {
        super_func = constructor.__super__[_name];
      }
      if (super_func == null) {
        constructor = constructor.__super__ != null ? constructor.__super__.constructor : null;
      }
    }
    if (super_func) {
      return super_func.apply(self, Array.prototype.slice.call(arguments, func != null ? 2 : 1));
    }
  };

  _.stringify = function() {
    var doit, newline, object, options, tab, _ref;
    if (arguments.length === 0) {
      return void 0;
    }
    object = arguments[0];
    options = (_ref = arguments[1]) != null ? _ref : {};
    if (options.prettify === true) {
      tab = '    ';
      newline = '\n';
    } else {
      tab = newline = '';
    }
    doit = function(o, level, p) {
      var indent, k, ni, nit, result, type, v;
      result = [];
      if (level == null) {
        level = 0;
      }
      indent = ((function() {
        var _i, _results;
        _results = [];
        for (_i = 0; 0 <= level ? _i < level : _i > level; 0 <= level ? _i++ : _i--) {
          _results.push(tab);
        }
        return _results;
      })()).join('');
      ni = newline + indent;
      nit = ni + tab;
      type = Object.prototype.toString.apply(o);
      result.push((function() {
        switch (type) {
          case '[object Object]':
            return "{" + nit + (((function() {
              var _ref1, _results;
              _results = [];
              for (k in o) {
                v = o[k];
                if (((options.filter == null) || (_ref1 = v.constructor, __indexOf.call(options.filter, _ref1) >= 0)) && (options.own !== true || {}.hasOwnProperty.call(o, k))) {
                  _results.push(k + ':' + doit(v, level + 1));
                }
              }
              return _results;
            })()).join(',' + nit)) + ni + "}";
          case '[object Array]':
            return "function () {" + nit + "var a = []; var o = {" + nit + (((function() {
              var _results;
              _results = [];
              for (k in o) {
                if (!__hasProp.call(o, k)) continue;
                v = o[k];
                _results.push(k + ':' + doit(v, level + 1));
              }
              return _results;
            })()).join(',' + nit)) + "};" + nit + "for (var k in o) {a[k] = o[k];} return a; }()";
          case '[object Boolean]':
            return o;
          case '[object Number]':
            return o;
          case '[object Date]':
            return "new Date(" + (o.valueOf()) + ")";
          case '[object Function]':
            return o.toString();
          case '[object Math]':
            return 'Math';
          case '[object String]':
            return "'" + (o.replace(/\'/g, '\\\'')) + "'";
          case '[object Undefined]':
            return 'void 0';
          case '[object Null]':
            return 'null';
          case '[object Buffer]':
          case '[object SlowBuffer]':
            if (o.length === 16) {
              return _.Uuid.unparse(o);
            } else {
              return o.toString();
            }
        }
      })());
      return result;
    };
    return doit(object).join(', ');
  };

  _.parse = function(str) {
    return (new Function("return " + str))();
  };

  _.param = function(parameters) {
    var parameter, serialize;
    if (_.type(parameters) === _.Type.String) {
      return encodeURIComponent(parameters);
    }
    serialize = [];
    for (parameter in parameters) {
      if (!__hasProp.call(parameters, parameter)) continue;
      serialize.push("" + (encodeURIComponent(parameter)) + "=" + (encodeURIComponent(parameters[parameter])));
    }
    return serialize.join('&');
  };

  _.serialize = function(self, local, fn) {
    var async, defer, deferred, next;
    if (typeof local === 'function') {
      fn = local;
      local = {};
    }
    if (typeof self === 'function') {
      fn = self;
      self = fn;
      local = {};
    }
    deferred = [];
    async = false;
    defer = function(has_more, fn) {
      if (!fn) {
        fn = has_more;
        has_more = true;
      }
      if (has_more) {
        return deferred.push(fn);
      } else {
        return deferred.push(function() {
          if (async === false) {
            return setTimeout(fn, 0);
          } else {
            return fn();
          }
        });
      }
    };
    fn.call(self, defer, local);
    return deferred.shift().call(self, next = function() {
      var result;
      if (deferred.length) {
        result = deferred.shift().call(self, next);
        if (result === next) {
          return async = true;
        }
      }
    });
  };

  _.parallelize = function(self, fn) {
    var count, dfn, end, join, on_join, push, pushed, _i, _len, _results;
    if (typeof self === 'function') {
      fn = self;
      self = fn;
    }
    pushed = [];
    on_join = null;
    join = function(fn) {
      return on_join = fn;
    };
    count = 0;
    end = function() {
      count += -1;
      if (count === 0) {
        return on_join != null ? on_join.call(self) : void 0;
      }
    };
    push = function(fn) {
      return pushed.push(function() {
        return setTimeout((function() {
          fn.call(self);
          return end();
        }), 0);
      });
    };
    fn.call(self, push, join);
    count = pushed.length;
    _results = [];
    for (_i = 0, _len = pushed.length; _i < _len; _i++) {
      dfn = pushed[_i];
      _results.push(dfn.call(self));
    }
    return _results;
  };

  _.extend = function(object, values, overwrite) {
    var set;
    set = function(o, val) {
      var k, v;
      for (k in val) {
        if (!__hasProp.call(val, k)) continue;
        v = val[k];
        if (o == null) {
          o = {};
        }
        if (_.type(o[k]) === _.Type.Object && _.type(v) === _.Type.Object) {
          set(o[k], v);
        } else {
          if (!(overwrite === false && (o[k] != null))) {
            o[k] = v;
          }
        }
      }
      return o;
    };
    return set(object, values);
  };

  _.defaults = function(object, defaults) {
    return _.extend(object, defaults, false);
  };

  _.Signal = Signal = _.prototype({
    adopt: {
      type: "SIGNAL",
      arrayMethods: ["pop", "push", "reverse", "shift", "sort", "splice", "unshift"],

      /* Events on evalutate
          value   REPLACE - ALL
          set     REPLACE - ONE - at KEY
          delete  REMOVE - ONE - at KEY
          pop     REMOVE - ONE - at LAST
          push    INSERT - ONE or MANY - at END 
          reverse SORT - ALL
          shift   REMOVE - ONE - at FIRST
          sort    SORT - ALL
          splice  REMOVE - ONE or MANY - at INDEX and INSERT - ONE or MANY - at INDEX
          unshift INSERT - ONE or MANY - at FIRST
       */
      Event: {
        Type: {
          Insert: 0,
          Replace: 1,
          Remove: 2,
          Sort: 3
        },
        What: {
          All: 0,
          One: 1,
          Many: 2
        },
        Where: {
          First: 0,
          Last: 1,
          End: 2,
          Index: 3
        }
      },
      EventDef: {
        value: {
          type: 'Replace',
          what: 'All'
        },
        set: {
          type: 'Replace',
          what: 'One',
          where: 'Index'
        },
        "delete": {
          type: 'Remove',
          what: 'One',
          where: 'Index'
        },
        pop: {
          type: 'Remove',
          what: 'One',
          where: 'Last'
        },
        push: {
          type: 'Insert',
          what: 'One',
          where: 'End'
        },
        reverse: {
          type: 'Sort',
          what: 'all'
        },
        shift: {
          type: 'Remove',
          what: 'One',
          where: 'First'
        },
        sort: {
          type: 'Sort',
          what: 'all'
        },
        splice: {
          type: 'Remove',
          what: 'One',
          where: 'Index'
        },
        unshift: {
          type: 'Insert',
          what: 'One',
          where: 'First'
        }
      },
      dependencyStack: [],
      transactions: {},
      Defer: _.prototype({
        constructor: function(signal, observerList) {
          this.signal = signal;
          this.observerList = observerList;
          return this.count = 0;
        },
        value: function(fn) {
          var observer, stack, _i, _len, _ref, _results;
          stack = Signal.dependencyStack;
          Signal.dependencyStack = [this.signal];
          this.signal._value = fn();
          this.signal._initialized = true;
          this.signal._idle = true;
          Signal.dependencyStack = stack;
          this.count += -1;
          this.signal.propagate(this, this.observerList);
          _ref = this.signal.observers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            observer = _ref[_i];
            _results.push(observer.notify(true));
          }
          return _results;
        },
        one: function() {
          return this.count += 1;
        },
        idle: function() {
          return this.count === 0;
        }
      })
    },
    constructor: function(definition, helpers) {
      var helper, name, _fn, _ref;
      this.definition = definition;
      this.helpers = helpers;
      _ref = this.helpers;
      _fn = function(helper, name, self) {
        return self.helpers[name] = function() {
          return helper.apply(self, arguments);
        };
      };
      for (name in _ref) {
        helper = _ref[name];
        _fn(helper, name, this);
      }
      this._value = null;
      this._initialized = false;
      this._idle = true;
      this.dependencies = [];
      this.dependencyType = Signal.type;
      this.dependents = [];
      this.observers = [];
      this.dependentTargets = [];
      return this.evaluate(new Signal.Defer(this));
    },
    evaluate: function(defer, observerList) {
      var deferred, dependency, dependentIndex, e, methodName, observer, result, type, _fn, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      this._value = this.definition;
      this._idle = true;
      this._error = null;
      _ref = this.dependencies;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dependency = _ref[_i];
        dependentIndex = dependency.dependents.indexOf(this);
        dependency.dependents.splice(dependentIndex, 1);
      }
      this.dependencies = [];
      switch (type = _.type(this.definition)) {
        case _.Type.Function:
          Signal.dependencyStack.push(this);
          try {
            deferred = (function(signal) {
              return function(fn) {
                var prev;
                prev = defer.signal;
                defer.signal = signal;
                defer.value.call(defer, fn);
                return defer.signal = prev;
              };
            })(this);
            try {
              result = this.definition(deferred);
            } catch (_error) {
              e = _error;
              result = void 0;
              this._error = e;
              if (this._catch != null) {
                this._catch(e);
                this._error = null;
              }
            }
            if (result === deferred) {
              this._idle = false;
              defer.one();
              _ref1 = this.observers;
              for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                observer = _ref1[_j];
                observer.notify(false);
              }
            } else {
              this._value = result;
              this._initialized = true;
              this._idle = true;
            }
          } finally {
            Signal.dependencyStack.pop();
          }
          break;
        case _.Type.Object:
        case _.Type.Array:
          if (this.set == null) {
            this.set = (_ref2 = (_ref3 = this.helpers) != null ? _ref3.set : void 0) != null ? _ref2 : (function(_this) {
              return function(key, value) {
                if (arguments.length === 1) {
                  _this.definition = key;
                } else {
                  _this.definition[key] = value;
                }
                return _this.value(_this.definition);
              };
            })(this);
            this["delete"] = (_ref4 = (_ref5 = this.helpers) != null ? _ref5["delete"] : void 0) != null ? _ref4 : (function(_this) {
              return function(key) {
                delete _this.definition[key];
                return _this.value(_this.definition);
              };
            })(this);
            if (type === _.Type.Array) {
              _ref6 = Signal.arrayMethods;
              _fn = (function(_this) {
                return function(methodName) {
                  var _ref7, _ref8;
                  return _this[methodName] = (_ref7 = (_ref8 = _this.helpers) != null ? _ref8[methodName] : void 0) != null ? _ref7 : function() {
                    var output;
                    output = _this.definition[methodName].apply(_this.definition, arguments);
                    _this.value(_this.definition);
                    return output;
                  };
                };
              })(this);
              for (_k = 0, _len2 = _ref6.length; _k < _len2; _k++) {
                methodName = _ref6[_k];
                _fn(methodName);
              }
            }
          }
          break;
        default:
          if (this.set != null) {
            delete this.set;
            delete this["delete"];
            _ref7 = Signal.arrayMethods;
            for (_l = 0, _len3 = _ref7.length; _l < _len3; _l++) {
              methodName = _ref7[_l];
              delete this[methodName];
            }
          }
      }
      if (observerList != null) {
        _ref8 = this.observers;
        for (_m = 0, _len4 = _ref8.length; _m < _len4; _m++) {
          observer = _ref8[_m];
          if ((observer != null) && (observerList.indexOf(observer)) < 0) {
            observerList.push(observer);
          }
        }
      }
      if (!((deferred != null) && result === deferred)) {
        return this.propagate(defer, observerList);
      }
    },
    "catch": function(report) {
      this._catch = report;
      if (this._error != null) {
        this._catch(this._error);
        return this._error = null;
      }
    },
    idle: function() {
      return this._idle;
    },
    propagate: function(defer, observerList) {
      var dependent, _i, _len, _ref, _results;
      this.dependentTargets = this.dependents.slice(0);
      _ref = this.dependents.slice(0);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        dependent = _ref[_i];
        if ((dependent != null) && this.dependentTargets.indexOf(dependent) >= 0) {
          _results.push(dependent.evaluate(defer, observerList));
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    },
    value: function(newDefinition) {
      var defer, dependent, observer, observerList, targetDependentIndex, _i, _len, _ref;
      if (newDefinition !== void 0) {
        this.definition = newDefinition;
        observerList = [];
        defer = new Signal.Defer(this, observerList);
        this.evaluate(defer, observerList);
        if (defer.idle()) {
          _ref = observerList.slice(0);
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            observer = _ref[_i];
            observer.trigger();
          }
        }
        return this._value;
      } else {
        dependent = Signal.dependencyStack[Signal.dependencyStack.length - 1];
        if ((dependent != null) && dependent.dependencyType === Signal.type) {
          if (this.dependents.indexOf(dependent) < 0) {
            this.dependents.push(dependent);
          }
          if (dependent.dependencies.indexOf(this) < 0) {
            dependent.dependencies.push(this);
          }
          targetDependentIndex = this.dependentTargets.indexOf(dependent);
          if (targetDependentIndex >= 0) {
            this.dependentTargets[targetDependentIndex] = null;
          }
        } else if ((dependent != null) && dependent.dependencyType === Observer.type) {
          if (this.observers.indexOf(dependent) < 0) {
            this.observers.push(dependent);
          }
          if (dependent.observees.indexOf(this) < 0) {
            dependent.observees.push(this);
          }
        }
        return this._value;
      }
    }
  });

  _.Observer = Observer = _.prototype({
    adopt: {
      type: "OBSERVER"
    },
    constructor: function(report) {
      this.observees = [];
      this.dependencyType = Observer.type;
      return this.observe(report);
    },
    observe: function(report) {
      var observee, observerIndex, _i, _j, _len, _len1, _ref, _ref1;
      this.report = report;
      this._ready = true;
      _ref = this.observees;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        observee = _ref[_i];
        observerIndex = observee.observers.indexOf(this);
        observee.observers.splice(dependentIndex, 1);
      }
      this.observees = [];
      Signal.dependencyStack.push(this);
      try {
        if (this.report != null) {
          this.report();
        }
      } finally {
        Signal.dependencyStack.pop();
      }
      this._ready = true;
      _ref1 = this.observees;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        observee = _ref1[_j];
        if (!observee.idle()) {
          this._ready = false;
          break;
        }
      }
      return null;
    },
    notify: function(status) {
      var observee, _i, _len, _ref;
      if (status === true) {
        this._ready = true;
        _ref = this.observees;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          observee = _ref[_i];
          if (!observee.idle()) {
            this._ready = false;
            break;
          }
        }
        if (this._ready) {
          return this.trigger();
        }
      } else {
        return this._ready = false;
      }
    },
    trigger: function() {
      Signal.dependencyStack.push(this);
      try {
        if (this.report != null) {
          return this.report();
        }
      } finally {
        Signal.dependencyStack.pop();
      }
    },
    ready: function() {
      return this._ready;
    }
  });

  _.Publisher = Publisher = _.prototype({
    constructor: function() {
      return this.subscribers = [];
    },
    notify: function(value) {
      var report, _i, _len, _ref, _results;
      _ref = this.subscribers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        report = _ref[_i];
        _results.push(report(value));
      }
      return _results;
    },
    subscribe: function(reporter) {
      return this.subscribers.push(reporter);
    }
  });

  _.Uuid = (function(_module) {
    var BufferClass, crypto, define, i, module, parse, require, unparse, uuid, v1, v4, whatwgRNG, _byteToHex, _clockseq, _hexToByte, _lastMSecs, _lastNSecs, _nodeId, _previousRoot, _rb, _rnds, _rnds8, _rng, _seedBytes;
    require = _module.require, crypto = _module.crypto, define = _module.define, module = _module.module;
    _rng = void 0;
    if (typeof require === "function") {
      try {
        _rb = require("crypto").randomBytes;
        _rng = _rb && function() {
          return _rb(16);
        };
      } catch (_error) {}
    }
    if (!_rng && crypto && crypto.getRandomValues) {
      _rnds8 = new Uint8Array(16);
      _rng = whatwgRNG = function() {
        crypto.getRandomValues(_rnds8);
        return _rnds8;
      };
    }
    if (!_rng) {
      _rnds = new Array(16);
      _rng = function() {
        var i, r;
        i = 0;
        r = void 0;
        while (i < 16) {
          if ((i & 0x03) === 0) {
            r = Math.random() * 0x100000000;
          }
          _rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;
          i++;
        }
        return _rnds;
      };
    }
    BufferClass = (typeof Buffer === "function" ? Buffer : Array);
    _byteToHex = [];
    _hexToByte = {};
    i = 0;
    while (i < 256) {
      _byteToHex[i] = (i + 0x100).toString(16).substr(1);
      _hexToByte[_byteToHex[i]] = i;
      i++;
    }
    parse = function(s, buf, offset) {
      var ii;
      i = (buf && offset) || 0;
      ii = 0;
      buf = buf || [];
      s.toLowerCase().replace(/[0-9a-f]{2}/g, function(oct) {
        if (ii < 16) {
          return buf[i + ii++] = _hexToByte[oct];
        }
      });
      while (ii < 16) {
        buf[i + ii++] = 0;
      }
      return buf;
    };
    unparse = function(buf, offset) {
      var bth;
      i = offset || 0;
      bth = _byteToHex;
      return bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + "-" + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]] + bth[buf[i++]];
    };
    _seedBytes = _rng();
    _nodeId = [_seedBytes[0] | 0x01, _seedBytes[1], _seedBytes[2], _seedBytes[3], _seedBytes[4], _seedBytes[5]];
    _clockseq = (_seedBytes[6] << 8 | _seedBytes[7]) & 0x3fff;
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1 = function(options, buf, offset) {
      var b, clockseq, dt, msecs, n, node, nsecs, tl, tmh;
      i = buf && offset || 0;
      b = buf || [];
      options = options || {};
      clockseq = (options.clockseq != null ? options.clockseq : _clockseq);
      msecs = (options.msecs != null ? options.msecs : new Date().getTime());
      nsecs = (options.nsecs != null ? options.nsecs : _lastNSecs + 1);
      dt = (msecs - _lastMSecs) + (nsecs - _lastNSecs) / 10000;
      if (dt < 0 && (options.clockseq == null)) {
        clockseq = clockseq + 1 & 0x3fff;
      }
      if ((dt < 0 || msecs > _lastMSecs) && (options.nsecs == null)) {
        nsecs = 0;
      }
      if (nsecs >= 10000) {
        throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
      }
      _lastMSecs = msecs;
      _lastNSecs = nsecs;
      _clockseq = clockseq;
      msecs += 12219292800000;
      tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
      b[i++] = tl >>> 24 & 0xff;
      b[i++] = tl >>> 16 & 0xff;
      b[i++] = tl >>> 8 & 0xff;
      b[i++] = tl & 0xff;
      tmh = (msecs / 0x100000000 * 10000) & 0xfffffff;
      b[i++] = tmh >>> 8 & 0xff;
      b[i++] = tmh & 0xff;
      b[i++] = tmh >>> 24 & 0xf | 0x10;
      b[i++] = tmh >>> 16 & 0xff;
      b[i++] = clockseq >>> 8 | 0x80;
      b[i++] = clockseq & 0xff;
      node = options.node || _nodeId;
      n = 0;
      while (n < 6) {
        b[i + n] = node[n];
        n++;
      }
      if (buf) {
        return buf;
      } else {
        return unparse(b);
      }
    };
    v4 = function(options, buf, offset) {
      var ii, rnds;
      i = buf && offset || 0;
      if (typeof options === "string") {
        buf = (options === "binary" ? new BufferClass(16) : null);
        options = null;
      }
      options = options || {};
      rnds = options.random || (options.rng || _rng)();
      rnds[6] = (rnds[6] & 0x0f) | 0x40;
      rnds[8] = (rnds[8] & 0x3f) | 0x80;
      if (buf) {
        ii = 0;
        while (ii < 16) {
          buf[i + ii] = rnds[ii];
          ii++;
        }
      }
      return buf || unparse(rnds);
    };
    uuid = v4;
    uuid.v1 = v1;
    uuid.v4 = v4;
    uuid.parse = parse;
    uuid.unparse = unparse;
    uuid.BufferClass = BufferClass;
    if (typeof define === "function" && define.amd) {
      define(function() {
        return uuid;
      });
    } else if (typeof module !== "undefined" && module.exports) {
      module.exports = uuid;
    } else {
      _previousRoot = _module.Uuid;
      uuid.noConflict = function() {
        _module.Uuid = _previousRoot;
        return uuid;
      };
      _module.Uuid = uuid;
    }
    uuid.isUuid = function(value) {
      var parsed, unparsed;
      if ((value != null) && Object.prototype.toString.apply(value === '[object String]' && value.length === 36)) {
        parsed = parse(value);
        unparsed = unparse(parsed);
        return value === unparsed;
      } else if (typeof Buffer === 'function' && Buffer.isBuffer(value)) {
        return value.length === 16;
      } else {
        return false;
      }
    };
    uuid["interface"] = function() {
      return uuid();
    };
    return uuid;
  })(_module);

  (function(_) {
    var actions;
    _.go = function(where, callback) {
      if (_.type(where) === _.Type.String) {
        return typeof window !== "undefined" && window !== null ? window.location = where : void 0;
      } else {
        return typeof where.submit === "function" ? where.submit(callback) : void 0;
      }
    };
    actions = [];
    actions.Type = {
      Create: 1,
      Attach: 2,
      Update: 3,
      Detach: 4,
      Delete: 5
    };
    actions["do"] = function(_arg) {
      var action, contained, object, parent, position, property, type, uuid, value;
      action = _arg.action, object = _arg.object, type = _arg.type, uuid = _arg.uuid, property = _arg.property, value = _arg.value, parent = _arg.parent, contained = _arg.contained;
      if (type == null) {
        type = _.type(object);
      }
      switch (action) {
        case actions.Type.Create:
          return actions.push({
            what: action,
            where: {
              u: uuid != null ? uuid : object.uuid,
              n: property,
              c: contained,
              a: parent,
              t: type
            }
          });
        case actions.Type.Attach:
          if (type === _.Type.Array) {
            position = property = object.length;
          }
          return actions.push({
            what: action,
            where: {
              u: _["do"].uuid({
                parent: object,
                property: property,
                create: true
              }),
              n: property,
              d: value,
              a: object._._.uuid,
              p: position
            }
          });
        case actions.Type.Update:
          return actions.push({
            what: action,
            where: {
              u: _["do"].uuid({
                parent: object,
                property: property
              }),
              d: value
            }
          });
        case actions.Type.Detach:
          return actions.push({
            what: action,
            where: {
              u: _["do"].uuid({
                parent: object,
                property: property
              })
            }
          });
        case actions.Type.Delete:
          return actions.push({
            what: action,
            where: {
              u: uuid != null ? uuid : object.uuid
            }
          });
      }
    };
    _["do"] = function(object, uuid) {
      return uuid != null ? uuid : uuid = object.uuid;
    };
    _["do"].flush = function() {
      var actions_;
      if (actions.length === 0) {
        return null;
      }
      actions_ = actions.slice(0);
      actions.length = 0;
      return actions_;
    };
    _["do"].internal = function(object, name, value) {
      var _base, _base1;
      if (_.isObject(object)) {
        if (object._ == null) {
          object._ = _.type(object) === _.Type.Array ? [] : {};
        }
        if ((_base = object._)._ == null) {
          _base._ = {};
        }
        if (name != null) {
          if ((_base1 = object._._)[name] == null) {
            _base1[name] = value;
          }
        }
      }
      return object;
    };
    _["do"].identify = function(object, options) {
      var filter, identified, identify;
      if (options == null) {
        options = {};
      }
      filter = options != null ? options.filter : void 0;
      identified = {};
      identify = function(current) {
        var index, item, name, parent, pos, position, type, uuid, value, _base, _base1, _base2, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
        item = current.item, name = current.name, parent = current.parent, position = current.position;
        _ref = {
          uuid: _["do"].uuid({
            object: item,
            parent: parent != null ? parent.object : void 0,
            property: name
          }),
          type: _.type(item)
        }, uuid = _ref.uuid, type = _ref.type;
        if (name === '_') {
          return;
        }
        _["do"].internal(item, 'uuid', uuid != null ? uuid : _.Uuid());
        if ((parent != null ? parent.object : void 0) != null) {
          if ((_base = parent.object)._ == null) {
            _base._ = _.type(parent.object) === _.Type.Array ? [] : {};
          }
          index = name != null ? name : position;
          if ((_base1 = parent.object._)[index] == null) {
            _base1[index] = type === _.Type.Array ? [] : {};
          }
          if ((_base2 = parent.object._[index]).uuid == null) {
            _base2.uuid = uuid != null ? uuid : uuid = _.Uuid();
          }
        }
        switch (type) {
          case _.Type.Object:
          case _.Type.Array:
            switch (type) {
              case _.Type.Object:
                for (name in item) {
                  value = item[name];
                  if (!(name !== '_' && ((filter == null) || (_ref1 = value.constructor, __indexOf.call(filter, _ref1) >= 0)) && identified[(_ref2 = value._) != null ? (_ref3 = _ref2._) != null ? _ref3.uuid : void 0 : void 0] !== true)) {
                    continue;
                  }
                  identify({
                    item: value,
                    name: name,
                    parent: {
                      object: item
                    }
                  });
                  if (_.isObject(value)) {
                    identified[value._._.uuid] = true;
                  }
                }
                break;
              case _.Type.Array:
                for (name in item) {
                  value = item[name];
                  if (!(name !== '_' && ((filter == null) || (_ref4 = value.constructor, __indexOf.call(filter, _ref4) >= 0)) && identified[(_ref5 = value._) != null ? (_ref6 = _ref5._) != null ? _ref6.uuid : void 0 : void 0] !== true)) {
                    continue;
                  }
                  if ((pos = parseInt(name)).toString() !== name) {
                    pos = null;
                  }
                  identify({
                    item: value,
                    name: (pos != null ? void 0 : name),
                    parent: {
                      object: item
                    },
                    position: pos
                  });
                  if (_.isObject(value)) {
                    identified[value._._.uuid] = true;
                  }
                }
            }
        }
      };
      identify({
        item: object,
        parent: (options.parent != null ? {
          object: options.parent
        } : null),
        name: options.name
      });
      return object;
    };
    _["do"].uuid = function(_arg) {
      var create, object, parent, property, uuid, _base, _ref, _ref1, _ref2;
      object = _arg.object, parent = _arg.parent, property = _arg.property, create = _arg.create;
      if ((object == null) && (parent != null) && (property != null)) {
        object = parent[property];
      }
      if (object == null) {
        return void 0;
      }
      uuid = (_ref = object.uuid) != null ? _ref : parent != null ? (_ref1 = parent._) != null ? (_ref2 = _ref1[property]) != null ? _ref2.uuid : void 0 : void 0 : void 0;
      if ((uuid == null) && create) {
        uuid = _.Uuid();
        if ((parent != null) && (property != null)) {
          parent._[property].uuid = uuid;
        }
        if (object._ == null) {
          object._ = _.type(object) === _.Type.Array ? [] : {};
        }
        if ((_base = object._)._ == null) {
          _base._ = {
            uuid: uuid
          };
        }
      }
      return uuid;
    };
    _["do"].set = function(object, property, value) {
      var action, index, k, set, v;
      if (!_.isObject(object)) {
        return;
      }
      if (object._ == null) {
        _["do"].identify(object);
      }
      set = function(o, k, v) {
        if (_.isObject(v) && (v._ == null)) {
          _["do"].identify(v);
        }
        return o[k] = v;
      };
      action = actions.Type.Update;
      switch (_.type(property)) {
        case _.Type.Number:
        case _.Type.String:
          if (object[property] == null) {
            action = actions.Type.Attach;
          }
          actions["do"]({
            action: action,
            object: object,
            property: property,
            value: value
          });
          set(object, property, value);
          break;
        case _.Type.Object:
          if (_.type(object) === _.Type.Array) {
            for (k in property) {
              v = property[k];
              if ((index = parseInt(k)) !== Number.NaN) {
                if (object[index] == null) {
                  action = actions.Type.Attach;
                }
                actions["do"]({
                  action: action,
                  object: object,
                  property: index,
                  value: v
                });
                set(object, index, v);
              } else {
                if (object[k] == null) {
                  action = actions.Type.Attach;
                }
                actions["do"]({
                  action: action,
                  object: object,
                  property: k,
                  value: v
                });
                set(object, k, v);
              }
            }
          } else {
            for (k in property) {
              v = property[k];
              if (object[k] == null) {
                action = actions.Type.Attach;
              }
              actions["do"]({
                action: action,
                object: object,
                property: k,
                value: v
              });
              set(object, k, v);
            }
          }
      }
      return object;
    };
    _["do"].pop = function(array) {
      return array.pop();
    };
    _["do"].push = function() {
      var array;
      array = Array.prototype.shift.call(arguments);
      return Array.prototype.push.apply(array, arguments);
    };
    _["do"].reverse = function() {
      var array;
      array = Array.prototype.shift.call(arguments);
      return Array.prototype.reverse.apply(array, arguments);
    };
    _["do"].shift = function() {
      var array;
      array = Array.prototype.shift.call(arguments);
      return Array.prototype.shift.apply(array, arguments);
    };
    _["do"].sort = function() {
      var array;
      array = Array.prototype.shift.call(arguments);
      return Array.prototype.sort.apply(array, arguments);
    };
    _["do"].splice = function() {
      var array;
      array = Array.prototype.shift.call(arguments);
      return Array.prototype.splice.apply(array, arguments);
    };
    return _["do"].unshift = function() {
      var array;
      array = Array.prototype.shift.call(arguments);
      return Array.prototype.unshift.apply(array, arguments);
    };
  })(_);

}).call(this);
