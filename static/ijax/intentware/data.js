// Generated by CoffeeScript 1.6.2
(function() {
  var Data, Intentware, Uuid, all, _module,
    __hasProp = {}.hasOwnProperty;

  _module = typeof window !== "undefined" && window !== null ? window : module;

  Intentware = require('../../general/intentware/core');

  Uuid = require('../../general/intentware/uuid');

  _module.exports = Data = (function() {
    function _Class(uuid, name, data) {
      this.uuid = uuid != null ? uuid : Uuid();
      this.name = name;
      this.data = data;
      return;
    }

    return _Class;

  })();

  all = {};

  Data.get = function(uuid) {
    return all[uuid];
  };

  Data.register = function(io) {
    return all[io.uuid] = io;
  };

  Data.forget = function(io) {
    return delete all[io.uuid];
  };

  Data.type = function(o) {
    return Object.prototype.toString.apply(o);
  };

  Data.Type = {
    Object: '[object Object]',
    Array: '[object Array]',
    Boolean: '[object Boolean]',
    Number: '[object Number]',
    Date: '[object Date]',
    Function: '[object Function]',
    Math: '[object Math]',
    String: '[object String]',
    Undefined: '[object Undefined]',
    Null: '[object Null]'
  };

  Data.toString_ = Data.toString;

  Data.stringify = Data.toString = function() {
    var doit, newline, object, options, tab, _ref;

    if (arguments.length === 0) {
      return Data.toString_();
    }
    object = arguments[0];
    options = (_ref = arguments[1]) != null ? _ref : {};
    if (options.prettify === true) {
      tab = '    ';
      newline = '\n';
    } else {
      tab = newline = '';
    }
    doit = function(o, level) {
      var indent, k, ni, nit, result, type, v;

      result = [];
      if (level == null) {
        level = 0;
      }
      indent = ((function() {
        var _i, _results;

        _results = [];
        for (_i = 0; 0 <= level ? _i < level : _i > level; 0 <= level ? _i++ : _i--) {
          _results.push(tab);
        }
        return _results;
      })()).join('');
      ni = newline + indent;
      nit = ni + tab;
      type = Object.prototype.toString.apply(o);
      result.push((function() {
        switch (type) {
          case '[object Object]':
            return "{" + nit + (((function() {
              var _results;

              _results = [];
              for (k in o) {
                if (!__hasProp.call(o, k)) continue;
                v = o[k];
                _results.push(k + ':' + doit(v, level + 1));
              }
              return _results;
            })()).join(',' + nit)) + ni + "}";
          case '[object Array]':
            return "function () {" + nit + "var a = []; var o = {" + nit + (((function() {
              var _results;

              _results = [];
              for (k in o) {
                if (!__hasProp.call(o, k)) continue;
                v = o[k];
                _results.push(k + ':' + doit(v, level + 1));
              }
              return _results;
            })()).join(',' + nit)) + "};" + nit + "for (var k in o) {a[k] = o[k];} return a; }()";
          case '[object Boolean]':
            return o;
          case '[object Number]':
            return o;
          case '[object Date]':
            return "new Date(" + (o.valueOf()) + ")";
          case '[object Function]':
            return o.toString();
          case '[object Math]':
            return 'Math';
          case '[object String]':
            return "'" + (o.replace(/\'/g, '\\\'')) + "'";
          case '[object Undefined]':
            return 'void 0';
          case '[object Null]':
            return 'null';
          case '[object Buffer]':
          case '[object SlowBuffer]':
            if (o.length === 16) {
              return Uuid.unparse(o);
            } else {
              return o.toString();
            }
        }
      })());
      return result;
    };
    return doit(object).join(', ');
  };

  Data.parse = Data.fromString = function(str) {
    return (new Function("return " + str))();
  };

  if (typeof window !== "undefined" && window !== null) {
    window.Intentware.Data = window.exports;
  }

}).call(this);
