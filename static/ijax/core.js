// Generated by CoffeeScript 1.6.3
(function() {
  var $, array, core, init, old$, toArray;

  if (typeof window !== "undefined" && window !== null) {
    window.modules = {
      intentware: window.exports = window.Intentware = {}
    };
    window.Intentware._require = window.require;
    window.require = function() {
      return exports;
    };
    window.modules['intentware/core'] = window.exports = window.Intentware.Core = {};
  } else {
    return;
  }

  array = [];

  toArray = function(a) {
    var i, item, result;
    i = -1;
    result = [];
    while (item = a[++i]) {
      result[i] = item;
    }
    return result;
  };

  init = function(action, type, element, callback, method) {
    var e;
    method = {
      on: 'addEventListener',
      off: 'removeEventListener'
    }[action];
    try {
      return element[method](type, callback, false);
    } catch (_error) {
      e = _error;
      method = {
        on: 'attachEvent',
        off: 'detachEvent'
      }[action];
      return element[method](action + type, function() {
        return callback.apply(element, arguments);
      });
    }
  };

  $ = function(s) {
    return new $.prototype.init(s);
  };

  old$ = window.$;

  exports.$ = window.$ = $;

  exports.noConflict = function() {
    window.$ = old$;
    return $;
  };

  core = {
    length: 0,
    init: function(a) {
      return array.push.apply(this, a && a.nodeType ? [a] : ("" + a === a ? toArray(document.querySelectorAll(a)) : (/^f/.test(typeof a) ? $(document).ready(a) : null)));
    },
    ready: function(a) {
      if (/c/.test(document.readyState)) {
        a();
      } else {
        $(document).on('DOMContentLoaded', a);
      }
      return this;
    },
    on: function(a, b) {
      return this.each(function(c) {
        return init('on', a, this, b);
      });
    },
    off: function(a, b) {
      return this.each(function(c) {
        return init('off', a, this, b);
      });
    },
    each: function(a) {
      var i, _i, _ref;
      for (i = _i = 0, _ref = this.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        a.call(this[i], this[i], i, this);
      }
      return this;
    },
    splice: array.splice
  };

  $.prototype = core.init.prototype = core;

}).call(this);
