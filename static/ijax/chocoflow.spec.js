// Generated by CoffeeScript 1.6.2
(function() {
  var Flow;

  Flow = require('../general/chocoflow');

  describe('Flow', function() {
    var f1, f2, f3;

    f1 = function(cb) {
      return setTimeout((function() {
        return cb(new Date().getTime());
      }), 250);
    };
    f2 = function(cb) {
      return setTimeout((function() {
        return cb(new Date().getTime());
      }), 150);
    };
    f3 = function(cb) {
      return setTimeout((function() {
        return cb(new Date().getTime());
      }), 350);
    };
    it('should not serialize three async functions without Flow', function() {
      var start, time1, time2, time3;

      start = new Date().getTime();
      time1 = time2 = time3 = null;
      runs(function() {
        f1(function(time) {
          return time1 = time;
        });
        f2(function(time) {
          return time2 = time;
        });
        return f3(function(time) {
          return time3 = time;
        });
      });
      waitsFor((function() {
        return (time1 != null) && (time2 != null) && (time3 != null);
      }), 'serial call of f1(), f2() and f3()', 1000);
      return runs(function() {
        expect(time1 - start).toBeGreaterThan(250);
        expect(time2 - start).toBeLessThan(150 + 10);
        return expect(time3 - start).toBeLessThan(350 + 10);
      });
    });
    it('should serialize three async functions with Flow', function() {
      var data, end, start, time1, time2, time3;

      start = new Date().getTime();
      time1 = time2 = time3 = end = null;
      data = {
        sum: 0
      };
      runs(function() {
        Flow.serialize(null, data, function(defer, local) {
          defer(function(next) {
            return f1(function(time) {
              time1 = time;
              local.sum += 1;
              return next();
            });
          });
          defer(function(next) {
            return f2(function(time) {
              time2 = time;
              local.sum += 1;
              return next();
            });
          });
          return defer(function(next) {
            return f3(function(time) {
              time3 = time;
              local.sum += 1;
              return next();
            });
          });
        });
        return end = new Date().getTime();
      });
      waitsFor((function() {
        return (time1 != null) && (time2 != null) && (time3 != null);
      }), 'Flow.serialize()', 1000);
      return runs(function() {
        expect(time1 - start).toBeGreaterThan(250 - 5);
        expect(time2 - start).toBeGreaterThan(400 - 5);
        expect(time3 - start).toBeGreaterThan(750 - 5);
        expect(end - start).toBeLessThan(10);
        return expect(data.sum).toBe(3);
      });
    });
    return it("Flow.parallelize and join after completion", function() {
      var end, next, nop_count, start, time1, time1M, time2, time3, _i;

      nop_count = 1000000;
      time1M = new Date().getTime();
      for (_i = 0; 0 <= nop_count ? _i < nop_count : _i > nop_count; 0 <= nop_count ? _i++ : _i--) {
        0;
      }
      time1M = new Date().getTime() - time1M;
      start = new Date().getTime();
      time1 = time2 = time3 = next = end = null;
      runs(function() {
        Flow.parallelize(function(push, join) {
          push(function() {
            var _j, _results;

            _results = [];
            for (_j = 0; 0 <= nop_count ? _j < nop_count : _j > nop_count; 0 <= nop_count ? _j++ : _j--) {
              0;
              _results.push(time1 = new Date().getTime());
            }
            return _results;
          });
          push(function() {
            var _j, _results;

            _results = [];
            for (_j = 0; 0 <= nop_count ? _j < nop_count : _j > nop_count; 0 <= nop_count ? _j++ : _j--) {
              0;
              _results.push(time2 = new Date().getTime());
            }
            return _results;
          });
          push(function() {
            var _j, _results;

            _results = [];
            for (_j = 0; 0 <= nop_count ? _j < nop_count : _j > nop_count; 0 <= nop_count ? _j++ : _j--) {
              0;
              _results.push(time3 = new Date().getTime());
            }
            return _results;
          });
          return join(function() {
            return end = new Date().getTime();
          });
        });
        return next = new Date().getTime();
      });
      waitsFor((function() {
        return (time1 != null) && (time2 != null) && (time3 != null);
      }), 'Flow.parallelize()', 1000);
      return runs(function() {
        expect(time1M).toBeGreaterThan(2);
        expect(end - start).toBeGreaterThan(3 * time1M - 1);
        return expect(next - start).toBeLessThan(4);
      });
    });
  });

}).call(this);
